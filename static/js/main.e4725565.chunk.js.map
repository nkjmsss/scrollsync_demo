{"version":3,"sources":["components/Base.tsx","components/Tile.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["input","Array","fill","reduce","acc","cur","i","concat","baseStyle","css","Base","$el","React","createRef","elm","this","current","props","setChildHeight","clientHeight","react_default","a","createElement","ref","react_markdown_default","source","className","Component","Tile","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","container","state","height","childHeight","_this2","document","addEventListener","currentPositionPercent","window","pageYOffset","body","innerHeight","scrollTop","setState","components_Base","bind","tileBaseStyle","position","overflow","zIndex","App","visibility","components_Tile","width","left","top","borderBottom","borderLeft","borderRight","Boolean","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yMAIMA,EAAgBC,MAAM,IAAIC,KAAK,GAAGC,OAAO,SAACC,EAAaC,EAAKC,GAAnB,OAC7CF,EAAG,yBAAAG,OACiBD,EAAE,EADnB,iPAOF,IAOGE,EAAoBC,YAAI,IA4BfC,6MAzBLC,IAAMC,IAAMC,+FAGlB,IAAMC,EAAMC,KAAKJ,IAAIK,QAEjBF,GAAOC,KAAKE,MAAMC,gBACpBH,KAAKE,MAAMC,eAAeJ,EAAIK,+CAKhC,OACEC,EAAAC,EAAAC,cAAA,OAAKC,IAAKR,KAAKJ,KACbS,EAAAC,EAAAC,cAACE,EAAAH,EAAD,CACEI,OAAQzB,EACR0B,UAAWjB,YACTD,EACAO,KAAKE,MAAMS,qBAlBJd,IAAMe,WC6BVC,cAnCb,SAAAA,EAAYX,GAAY,IAAAY,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAf,KAAAa,IACtBC,EAAAC,OAAAE,EAAA,EAAAF,CAAAf,KAAAe,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAnB,KAAME,KAHAkB,UAAYvB,IAAMC,YAIxBgB,EAAKO,MAAQ,CACXC,OAAQ,EACRC,YAAa,GAJOT,mFAQJ,IAAAU,EAAAxB,KAClByB,SAASC,iBAAiB,SAAU,WAClC,IAAMC,EAAyBC,OAAOC,aAAeJ,SAASK,KAAK1B,aAAewB,OAAOG,aAE1D,OAA3BP,EAAKJ,UAAUnB,UACjBuB,EAAKJ,UAAUnB,QAAQ+B,WAAaR,EAAKH,MAAME,YAAcC,EAAKJ,UAAUnB,QAAQG,cAAgBuB,4CAK3FL,GACbtB,KAAKiC,SAAS,CACZV,YAAaD,qCAKf,OACEjB,EAAAC,EAAAC,cAAA,OAAKI,UAAWX,KAAKE,MAAMS,UAAWH,IAAKR,KAAKoB,WAC9Cf,EAAAC,EAAAC,cAAC2B,EAAD,CACE/B,eAAgBH,KAAKG,eAAegC,KAAKnC,gBA/BhCH,IAAMe,WCNnBwB,EAAgB1C,YAAI,CACxB2C,SAAU,QACVC,SAAU,SACVC,OAAQ,IAoEKC,mLA/DX,OACEnC,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAAC2B,EAAD,CACEvB,UAAWjB,YAAI,CACb+C,WAAY,aAIhBpC,EAAAC,EAAAC,cAACmC,EAAD,CACE/B,UAAWjB,YACT0C,EACA,CACEO,MAAO,OACPrB,OAAQ,OACRsB,KAAM,IACNC,IAAK,IACLC,aAAc,qBAKpBzC,EAAAC,EAAAC,cAACmC,EAAD,CACE/B,UAAWjB,YACT0C,EACA,CACEO,MAAO,OACPrB,OAAQ,QACRsB,KAAM,OACNC,IAAK,MACLE,WAAY,qBAKlB1C,EAAAC,EAAAC,cAACmC,EAAD,CACE/B,UAAWjB,YACT0C,EACA,CACEO,MAAO,OACPrB,OAAQ,OACRsB,KAAM,MACNC,IAAK,OACLG,YAAa,qBAKnB3C,EAAAC,EAAAC,cAACmC,EAAD,CACE/B,UAAWjB,YACT0C,EACA,CACEO,MAAO,OACPrB,OAAQ,OACRsB,KAAM,OACNC,IAAK,mBAxDDhD,IAAMe,WCAJqC,QACW,cAA7BrB,OAAOsB,SAASC,UAEe,UAA7BvB,OAAOsB,SAASC,UAEhBvB,OAAOsB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjD,EAAAC,EAAAC,cAACgD,EAAD,MAAS9B,SAAS+B,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.e4725565.chunk.js","sourcesContent":["import React from 'react'\nimport {css} from 'emotion'\nimport ReactMarkdown from 'react-markdown'\n\nconst input: string = Array(30).fill(0).reduce((acc: string, cur, i) => (\n  acc += `\n  # This is a header${i+1}\n\n  This is a paragraph\n\n  Lorem, ipsum dolor sit amet consectetur adipisicing elit. Eveniet aut ea quam ipsum culpa illum recusandae sapiente hic iusto. Nesciunt adipisci officia atque omnis numquam unde eum aut, commodi eaque?\n  `\n), '')\n\ninterface Props {\n  className?: string\n  setChildHeight?: (height: number) => void\n}\n\nconst baseStyle: string = css({})\n\nclass Base extends React.Component<Props> {\n  private $el = React.createRef<HTMLDivElement>()\n\n  componentDidMount() {\n    const elm = this.$el.current\n\n    if (elm && this.props.setChildHeight) {\n      this.props.setChildHeight(elm.clientHeight)\n    }\n  }\n\n  render() {\n    return (\n      <div ref={this.$el}>\n        <ReactMarkdown\n          source={input}\n          className={css(\n            baseStyle,\n            this.props.className\n          )}\n        ></ReactMarkdown>\n      </div>\n    )\n  }\n}\n\nexport default Base\n","import React from 'react'\nimport Base from './Base'\n\ninterface Props {\n  className?: string\n}\n\ninterface State {\n  height: number\n  childHeight: number\n}\n\nclass Tile extends React.Component<Props, State> {\n  private container = React.createRef<HTMLDivElement>()\n\n  constructor(props: any) {\n    super(props)\n    this.state = {\n      height: 0,\n      childHeight: 0,\n    }\n  }\n\n  componentDidMount() {\n    document.addEventListener('scroll', () => {\n      const currentPositionPercent = window.pageYOffset / (document.body.clientHeight - window.innerHeight)\n\n      if (this.container.current !== null) {\n        this.container.current.scrollTop = (this.state.childHeight - this.container.current.clientHeight) * currentPositionPercent\n      }\n    })\n  }\n\n  setChildHeight(height: number) {\n    this.setState({\n      childHeight: height,\n    })\n  }\n\n  render() {\n    return (\n      <div className={this.props.className} ref={this.container}>\n        <Base\n          setChildHeight={this.setChildHeight.bind(this)}\n        ></Base>\n      </div>\n    )\n  }\n}\n\nexport default Tile\n","import React from 'react'\n// import {css} from 'emotion'\nimport Tile from './components/Tile'\nimport Base from './components/Base'\nimport { css } from 'emotion'\n\nconst tileBaseStyle = css({\n  position: 'fixed',\n  overflow: 'hidden',\n  zIndex: 2,\n})\n\nclass App extends React.Component {\n  render() {\n    return (\n      <main>\n        <Base\n          className={css({\n            visibility: 'hidden',\n          })}\n        ></Base>\n\n        <Tile\n          className={css(\n            tileBaseStyle,\n            {\n              width: '75vw',\n              height: '30vh',\n              left: '0',\n              top: '0',\n              borderBottom: '1px solid #000',\n            }\n          )}\n        ></Tile>\n\n        <Tile\n          className={css(\n            tileBaseStyle,\n            {\n              width: '25vw',\n              height: '100vh',\n              left: '75vw',\n              top: '0vh',\n              borderLeft: '1px solid #000',\n            }\n          )}\n        ></Tile>\n\n        <Tile\n          className={css(\n            tileBaseStyle,\n            {\n              width: '20vw',\n              height: '70vh',\n              left: '0vw',\n              top: '30vh',\n              borderRight: '1px solid #000',\n            }\n          )}\n        ></Tile>\n\n        <Tile\n          className={css(\n            tileBaseStyle,\n            {\n              width: '55vw',\n              height: '70vh',\n              left: '20vw',\n              top: '30vh',\n            }\n          )}\n        ></Tile>\n      </main>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}